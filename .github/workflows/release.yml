name: Release script
on:
  push:
    tags:
      - 'v*'
jobs:
  build_and_package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
          - os: macos-latest
          - os: windows-latest
          - os: ubuntu-latest
            arch: x64
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Cache TypeScript build
        uses: actions/cache@v3
        with:
          path: ./dist
          key: ${{ runner.os }}-tsc-${{ hashFiles('**/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-tsc-
      - name: Install dependencies
        run: npm install
      - name: Run Linter
        run: npm run lint
      - name: Set up environment for macOS build
        if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: '--max-old-space-size=8192'
        run: |
          npm run build
      - name: Notarize macOS build
        if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: npm run notarize
      - name: Build for non-macOS
        if: matrix.os != 'macos-13' && matrix.os != 'macos-latest'
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
        run: |
          npm run build
      - name: Set version as env
        run: echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Rename artifacts for ARM architecture
        if: matrix.os == 'macos-latest'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/Reor_${{ env.APP_VERSION }}-arm64.dmg
      - name: Rename artifacts for Intel architecture
        if: matrix.os == 'macos-13'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/Reor_${{ env.APP_VERSION }}-intel.dmg
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-app
          path: |
            ./release/*/*.exe
            ./release/${{ env.APP_VERSION }}/**/*.AppImage
            ./release/${{ env.APP_VERSION }}/*-arm64.dmg
            ./release/${{ env.APP_VERSION }}/*-intel.dmg
  create_release:
    needs: build_and_package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4.1.7
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*.exe
            **/*.AppImage
            **/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
